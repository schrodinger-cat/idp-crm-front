{"version":3,"sources":["pages/Login/Register.js","pages/Login/Login.js","pages/MainPage/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Register","handleSubmit","e","preventDefault","_this","props","form","validateFields","err","values","console","log","getFieldDecorator","this","react_default","a","createElement","es_form","onSubmit","Item","rules","required","message","input","prefix","icon","type","style","color","placeholder","es_button","htmlType","className","Component","Form","create","name","Login","state","rerister","isLogged","openRegisterWindow","setState","register","onCloseRegister","drawer","title","placement","width","closable","onClose","visible","destroyOnClose","Login_Register","row","justify","col","span","valuePropName","initialValue","es_checkbox","href","onClick","MainPage","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWAKMA,0NACJC,aAAe,SAAAC,GACbA,EAAEC,iBACFC,EAAKC,MAAMC,KAAKC,eAAe,SAACC,EAAKC,GAC9BD,GACHE,QAAQC,IAAI,4BAA6BF,8EAKtC,IACCG,EAAsBC,KAAKR,MAAMC,KAAjCM,kBAER,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAUL,KAAKZ,cACnBa,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACGP,EAAkB,YAAa,CAC9BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mEADpCV,CAEEE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAQV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAAyBC,YAAY,yBAE3Ff,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACGP,EAAkB,YAAa,CAC9BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,qFADpCV,CAGCE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAQV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CF,KAAK,WACLG,YAAY,2CAIlBf,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACGP,EAAkB,cAAe,CAChCQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,2HADpCV,CAGCE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAQV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CF,KAAK,WACLG,YAAY,8GAIlBf,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACEL,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQJ,KAAK,UAAUK,SAAS,SAASC,UAAU,qBAAnD,yHA3CaC,cAsDRjC,EAFfA,EAAWkC,IAAKC,OAAO,CAAEC,KAAM,YAApBF,CAAkClC,GCnDvCqC,6MACJC,MAAQ,CACNC,UAAU,EACVC,UAAU,KAGZvC,aAAe,SAAAC,GACbA,EAAEC,iBACFC,EAAKC,MAAMC,KAAKC,eAAe,SAACC,EAAKC,GAC9BD,GACHE,QAAQC,IAAI,4BAA6BF,QAK/CgC,mBAAqB,SAAAvC,GACnBA,EAAEC,iBAEFC,EAAKsC,SAAS,CAAEC,UAAU,OAG5BC,gBAAkB,WAChBxC,EAAKsC,SAAS,CAAEC,UAAU,6EAGnB,IACC/B,EAAsBC,KAAKR,MAAMC,KAAjCM,kBAER,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,MAAM,qEACNC,UAAU,QACVC,MAAO,IACPC,UAAU,EACVC,QAASrC,KAAK+B,gBACdO,QAAStC,KAAKyB,MAAMK,SACpBS,gBAAgB,GAEhBtC,EAAAC,EAAAC,cAACqC,EAAD,OAGFvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAK5B,KAAK,OAAO6B,QAAQ,UACvBzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAKC,KAAM,EAAGzB,UAAU,SACtBlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAUL,KAAKZ,aAAc+B,UAAU,cAC3ClB,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACGP,EAAkB,WAAY,CAC7BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mEADpCV,CAEEE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAQV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAAyBC,YAAY,yBAE3Ff,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACGP,EAAkB,WAAY,CAC7BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,qFADpCV,CAGCE,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAQV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CF,KAAK,WACLG,YAAY,2CAIlBf,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACGP,EAAkB,WAAY,CAC7B8C,cAAe,UACfC,cAAc,GAFf/C,CAGEE,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,yFACH9C,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,oBAAoB6B,KAAK,IAAtC,8EAGA/C,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQJ,KAAK,UAAUK,SAAS,SAASC,UAAU,qBAAnD,kCARF,qBAWM,IACJlB,EAAAC,EAAAC,cAAA,KAAG6C,KAAK,IAAIC,QAASjD,KAAK4B,oBAA1B,4HA1EIR,aAwFLI,EAFfA,EAAQH,IAAKC,OAAO,CAAEC,KAAM,gBAApBF,CAAsCG,GClF/B0B,mLANX,OACEjD,EAAAC,EAAAC,cAAA,yBAHiBiB,aCwBR+B,sBAjBb,SAAAA,EAAY3D,GAAO,IAAAD,EAAA,OAAA6D,OAAAC,EAAA,EAAAD,CAAApD,KAAAmD,IACjB5D,EAAA6D,OAAAE,EAAA,EAAAF,CAAApD,KAAAoD,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxD,KAAMR,KAEDiC,MAAQ,CACXE,UAAU,GAJKpC,wEASjB,OACEU,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAY7D,KAAKyB,MAAME,SAAWuB,EAAW1B,YAZzDJ,cCIE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.390277ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Form, Icon, Input, Button, Checkbox, Drawer } from 'antd';\nimport 'antd/dist/antd.css';\nimport './Login.css';\n\nclass Register extends Component {\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Item>\n          {getFieldDecorator('rUserName', {\n            rules: [{ required: true, message: 'Введите имя' }],\n          })(<Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Имя\" />)}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('rPassword', {\n            rules: [{ required: true, message: 'Введите пароль' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Пароль\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('rRePassword', {\n            rules: [{ required: true, message: 'Введите пароль ещё раз' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Подтвердите пароль\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            Зарегистрироваться\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nRegister = Form.create({ name: 'register' })(Register);\n\nexport default Register;\n","import React, { Component } from 'react';\nimport { Row, Col, Form, Icon, Input, Button, Checkbox, Drawer } from 'antd';\nimport Register from './Register.js';\nimport 'antd/dist/antd.css';\nimport './Login.css';\n\nclass Login extends Component {\n  state = {\n    rerister: false,\n    isLogged: false,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  openRegisterWindow = e => {\n    e.preventDefault();\n\n    this.setState({ register: true });\n  };\n\n  onCloseRegister = () => {\n    this.setState({ register: false });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <div>\n        <Drawer\n          title=\"Регистрация\"\n          placement=\"right\"\n          width={400}\n          closable={false}\n          onClose={this.onCloseRegister}\n          visible={this.state.register}\n          destroyOnClose={true}\n        >\n          <Register />\n        </Drawer>\n\n        <Row type=\"flex\" justify=\"center\">\n          <Col span={5} className=\"login\">\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n              <h2>Войти</h2>\n              <Form.Item>\n                {getFieldDecorator('userName', {\n                  rules: [{ required: true, message: 'Введите имя' }],\n                })(<Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Имя\" />)}\n              </Form.Item>\n              <Form.Item>\n                {getFieldDecorator('password', {\n                  rules: [{ required: true, message: 'Введите пароль' }],\n                })(\n                  <Input\n                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                    type=\"password\"\n                    placeholder=\"Пароль\"\n                  />,\n                )}\n              </Form.Item>\n              <Form.Item>\n                {getFieldDecorator('remember', {\n                  valuePropName: 'checked',\n                  initialValue: true,\n                })(<Checkbox>Запомнить меня</Checkbox>)}\n                <a className=\"login-form-forgot\" href=\"\">\n                  Забыли пароль?\n                </a>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                  Войти\n                </Button>\n                Или{' '}\n                <a href=\"#\" onClick={this.openRegisterWindow}>\n                  зарегистрироваться\n                </a>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nLogin = Form.create({ name: 'normal_login' })(Login);\n\nexport default Login;\n","import React, { Component } from 'react';\n\nclass MainPage extends Component {\n  render() {\n    return(\n      <div>666</div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Login from './pages/Login/Login.js';\nimport MainPage from './pages/MainPage/MainPage.js';\n\nimport './styles/App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLogged: false,\n    };\n  }\n\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" component={ this.state.isLogged ? MainPage : Login } />\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}